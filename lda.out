sample.interval=20000
"ls" "FUN" "lapply" ".rs.objectsOnSearchPath" ".rs.getCompletionsSearchPath" "Reduce" "<Anonymous>" 
"paste" "sub" ".rs.doStripSurrounding" ".rs.stripSurrounding" ".rs.getAnywhere" ".rs.resolveObjectFromFunctionCall" ".rs.getCompletionsArgument" ".rs.getCompletionsFunction" ".rs.appendCompletions" ".rs.getRCompletions" ".rs.appendCompletions" "<Anonymous>" 
"ls" "FUN" "lapply" ".rs.objectsOnSearchPath" ".rs.getCompletionsSearchPath" "Reduce" "<Anonymous>" 
"ls" "FUN" "lapply" ".rs.objectsOnSearchPath" ".rs.getCompletionsSearchPath" "Reduce" "<Anonymous>" 
".rs.objectsOnSearchPath" ".rs.getCompletionsSearchPath" "Reduce" "<Anonymous>" 
"mode" "capture.output" "parse" "withCallingHandlers" "suppressWarnings" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.getFunctionArgumentNames" "<Anonymous>" 
"ls" "FUN" "lapply" ".rs.objectsOnSearchPath" ".rs.getCompletionsSearchPath" "Reduce" "<Anonymous>" 
"all.equal.numeric" "all.equal" "LDA" 
"match" "possibleExtends" "is" "validObject" ".nextMethod" "eval" "eval" "callNextMethod" "do.call" ".local" ".nextMethod" "eval" "eval" "callNextMethod" ".local" "initialize" "standardGeneric" "initialize" "new" "do.call" ".list2control" "asMethod" "as" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
".Call" "method" "LDA" 
